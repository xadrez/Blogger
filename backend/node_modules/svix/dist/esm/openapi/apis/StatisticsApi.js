var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BaseAPIRequestFactory, RequiredError } from './baseapi';
import { HttpMethod, HttpInfo } from '../http/http';
import { ObjectSerializer } from '../models/ObjectSerializer';
import { ApiException } from './exception';
import { isCodeInRange } from '../util';
export class StatisticsApiRequestFactory extends BaseAPIRequestFactory {
    v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appUsageStatsIn === null || appUsageStatsIn === undefined) {
                throw new RequiredError("StatisticsApi", "v1StatisticsAggregateAppStats", "appUsageStatsIn");
            }
            const localVarPath = '/api/v1/stats/usage/app';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(appUsageStatsIn, "AppUsageStatsIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StatisticsAggregateEventTypes(_options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            const localVarPath = '/api/v1/stats/usage/event-types';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StatsAppAttempts(appId, startDate, endDate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new RequiredError("StatisticsApi", "v1StatsAppAttempts", "appId");
            }
            const localVarPath = '/api/v1/stats/app/{app_id}/attempt'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (startDate !== undefined) {
                requestContext.setQueryParam("startDate", ObjectSerializer.serialize(startDate, "Date", "date-time"));
            }
            if (endDate !== undefined) {
                requestContext.setQueryParam("endDate", ObjectSerializer.serialize(endDate, "Date", "date-time"));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new RequiredError("StatisticsApi", "v1StatsEndpointAttempts", "appId");
            }
            if (endpointId === null || endpointId === undefined) {
                throw new RequiredError("StatisticsApi", "v1StatsEndpointAttempts", "endpointId");
            }
            const localVarPath = '/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))
                .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (startDate !== undefined) {
                requestContext.setQueryParam("startDate", ObjectSerializer.serialize(startDate, "Date", "date-time"));
            }
            if (endDate !== undefined) {
                requestContext.setQueryParam("endDate", ObjectSerializer.serialize(endDate, "Date", "date-time"));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
}
export class StatisticsApiResponseProcessor {
    v1StatisticsAggregateAppStatsWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("202", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AppUsageStatsOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AppUsageStatsOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StatisticsAggregateEventTypesWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("202", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AggregateEventTypesOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AggregateEventTypesOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StatsAppAttemptsWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AttemptStatisticsResponse", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AttemptStatisticsResponse", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StatsEndpointAttemptsWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AttemptStatisticsResponse", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AttemptStatisticsResponse", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
}
//# sourceMappingURL=StatisticsApi.js.map