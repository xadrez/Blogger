var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BaseAPIRequestFactory, RequiredError } from './baseapi';
import { HttpMethod, HttpInfo } from '../http/http';
import { ObjectSerializer } from '../models/ObjectSerializer';
import { ApiException } from './exception';
import { isCodeInRange } from '../util';
export class StreamApiRequestFactory extends BaseAPIRequestFactory {
    v1StreamCreate(streamIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamIn === null || streamIn === undefined) {
                throw new RequiredError("StreamApi", "v1StreamCreate", "streamIn");
            }
            const localVarPath = '/api/v1/stream';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(streamIn, "StreamIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamId === null || streamId === undefined) {
                throw new RequiredError("StreamApi", "v1StreamCreateEvents", "streamId");
            }
            if (createStreamIn === null || createStreamIn === undefined) {
                throw new RequiredError("StreamApi", "v1StreamCreateEvents", "createStreamIn");
            }
            const localVarPath = '/api/v1/stream/{stream_id}/events'
                .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createStreamIn, "CreateStreamIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamDelete(streamId, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamId === null || streamId === undefined) {
                throw new RequiredError("StreamApi", "v1StreamDelete", "streamId");
            }
            const localVarPath = '/api/v1/stream/{stream_id}'
                .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamEventsGet(streamId, limit, iterator, after, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamId === null || streamId === undefined) {
                throw new RequiredError("StreamApi", "v1StreamEventsGet", "streamId");
            }
            const localVarPath = '/api/v1/stream/{stream_id}/events'
                .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (limit !== undefined) {
                requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "number", "uint64"));
            }
            if (iterator !== undefined) {
                requestContext.setQueryParam("iterator", ObjectSerializer.serialize(iterator, "string", ""));
            }
            if (after !== undefined) {
                requestContext.setQueryParam("after", ObjectSerializer.serialize(after, "Date", "date-time"));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamGet(streamId, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamId === null || streamId === undefined) {
                throw new RequiredError("StreamApi", "v1StreamGet", "streamId");
            }
            const localVarPath = '/api/v1/stream/{stream_id}'
                .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamList(limit, iterator, order, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            const localVarPath = '/api/v1/stream';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (limit !== undefined) {
                requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "number", "uint64"));
            }
            if (iterator !== undefined) {
                requestContext.setQueryParam("iterator", ObjectSerializer.serialize(iterator, "string", ""));
            }
            if (order !== undefined) {
                const serializedParams = ObjectSerializer.serialize(order, "Ordering", "");
                for (const key of Object.keys(serializedParams)) {
                    requestContext.setQueryParam(key, serializedParams[key]);
                }
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamPatch(streamId, streamPatch, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamId === null || streamId === undefined) {
                throw new RequiredError("StreamApi", "v1StreamPatch", "streamId");
            }
            if (streamPatch === null || streamPatch === undefined) {
                throw new RequiredError("StreamApi", "v1StreamPatch", "streamPatch");
            }
            const localVarPath = '/api/v1/stream/{stream_id}'
                .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(streamPatch, "StreamPatch", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1StreamUpdate(streamId, streamIn, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (streamId === null || streamId === undefined) {
                throw new RequiredError("StreamApi", "v1StreamUpdate", "streamId");
            }
            if (streamIn === null || streamIn === undefined) {
                throw new RequiredError("StreamApi", "v1StreamUpdate", "streamIn");
            }
            const localVarPath = '/api/v1/stream/{stream_id}'
                .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(streamIn, "StreamIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
}
export class StreamApiResponseProcessor {
    v1StreamCreateWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamCreateEventsWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("202", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "any", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "any", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamDeleteWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("204", response.httpStatusCode)) {
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamEventsGetWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventStreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventStreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamGetWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamListWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseStreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseStreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamPatchWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1StreamUpdateWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "StreamOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
}
//# sourceMappingURL=StreamApi.js.map