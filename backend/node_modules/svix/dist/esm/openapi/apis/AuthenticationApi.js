var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BaseAPIRequestFactory, RequiredError } from './baseapi';
import { HttpMethod, HttpInfo } from '../http/http';
import { ObjectSerializer } from '../models/ObjectSerializer';
import { ApiException } from './exception';
import { isCodeInRange } from '../util';
export class AuthenticationApiRequestFactory extends BaseAPIRequestFactory {
    v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationAppPortalAccess", "appId");
            }
            if (appPortalAccessIn === null || appPortalAccessIn === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationAppPortalAccess", "appPortalAccessIn");
            }
            const localVarPath = '/api/v1/auth/app-portal-access/{app_id}'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(appPortalAccessIn, "AppPortalAccessIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1AuthenticationCreateMessageToken(appId, createTokenIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationCreateMessageToken", "appId");
            }
            if (createTokenIn === null || createTokenIn === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationCreateMessageToken", "createTokenIn");
            }
            const localVarPath = '/api/v1/auth/app/{app_id}/create-message-token'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(createTokenIn, "CreateTokenIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1AuthenticationDashboardAccess(appId, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationDashboardAccess", "appId");
            }
            const localVarPath = '/api/v1/auth/dashboard-access/{app_id}'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (oneTimeTokenIn === null || oneTimeTokenIn === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationExchangeOneTimeToken", "oneTimeTokenIn");
            }
            const localVarPath = '/api/v1/auth/one-time-token';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(oneTimeTokenIn, "OneTimeTokenIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationExpireAll", "appId");
            }
            if (applicationTokenExpireIn === null || applicationTokenExpireIn === undefined) {
                throw new RequiredError("AuthenticationApi", "v1AuthenticationExpireAll", "applicationTokenExpireIn");
            }
            const localVarPath = '/api/v1/auth/app/{app_id}/expire-all'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(applicationTokenExpireIn, "ApplicationTokenExpireIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1AuthenticationLogout(idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            const localVarPath = '/api/v1/auth/logout';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
}
export class AuthenticationApiResponseProcessor {
    v1AuthenticationAppPortalAccessWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AppPortalAccessOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AppPortalAccessOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1AuthenticationCreateMessageTokenWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AuthTokenOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "AuthTokenOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1AuthenticationDashboardAccessWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "DashboardAccessOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "DashboardAccessOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1AuthenticationExchangeOneTimeTokenWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "OneTimeTokenOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "OneTimeTokenOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1AuthenticationExpireAllWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("204", response.httpStatusCode)) {
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1AuthenticationLogoutWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("204", response.httpStatusCode)) {
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
}
//# sourceMappingURL=AuthenticationApi.js.map