var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BaseAPIRequestFactory, RequiredError } from './baseapi';
import { HttpMethod, HttpInfo } from '../http/http';
import { ObjectSerializer } from '../models/ObjectSerializer';
import { ApiException } from './exception';
import { isCodeInRange } from '../util';
export class EventTypeApiRequestFactory extends BaseAPIRequestFactory {
    v1EventTypeCreate(eventTypeIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeIn === null || eventTypeIn === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeCreate", "eventTypeIn");
            }
            const localVarPath = '/api/v1/event-type';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(eventTypeIn, "EventTypeIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeDelete(eventTypeName, expunge, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeName === null || eventTypeName === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeDelete", "eventTypeName");
            }
            const localVarPath = '/api/v1/event-type/{event_type_name}'
                .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (expunge !== undefined) {
                requestContext.setQueryParam("expunge", ObjectSerializer.serialize(expunge, "boolean", ""));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeExportOpenapi(idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            const localVarPath = '/api/v1/event-type/export/openapi';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeSchemaIn === null || eventTypeSchemaIn === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeGenerateExample", "eventTypeSchemaIn");
            }
            const localVarPath = '/api/v1/event-type/schema/generate-example';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(eventTypeSchemaIn, "EventTypeSchemaIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeGet(eventTypeName, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeName === null || eventTypeName === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeGet", "eventTypeName");
            }
            const localVarPath = '/api/v1/event-type/{event_type_name}'
                .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeGetRetrySchedule(eventTypeName, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeName === null || eventTypeName === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeGetRetrySchedule", "eventTypeName");
            }
            const localVarPath = '/api/v1/event-type/{event_type_name}/retry-schedule'
                .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeImportOpenApiIn === null || eventTypeImportOpenApiIn === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeImportOpenapi", "eventTypeImportOpenApiIn");
            }
            const localVarPath = '/api/v1/event-type/import/openapi';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(eventTypeImportOpenApiIn, "EventTypeImportOpenApiIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            const localVarPath = '/api/v1/event-type';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (limit !== undefined) {
                requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "number", "uint64"));
            }
            if (iterator !== undefined) {
                requestContext.setQueryParam("iterator", ObjectSerializer.serialize(iterator, "string", ""));
            }
            if (order !== undefined) {
                const serializedParams = ObjectSerializer.serialize(order, "Ordering", "");
                for (const key of Object.keys(serializedParams)) {
                    requestContext.setQueryParam(key, serializedParams[key]);
                }
            }
            if (includeArchived !== undefined) {
                requestContext.setQueryParam("include_archived", ObjectSerializer.serialize(includeArchived, "boolean", ""));
            }
            if (withContent !== undefined) {
                requestContext.setQueryParam("with_content", ObjectSerializer.serialize(withContent, "boolean", ""));
            }
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypePatch(eventTypeName, eventTypePatch, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeName === null || eventTypeName === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypePatch", "eventTypeName");
            }
            if (eventTypePatch === null || eventTypePatch === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypePatch", "eventTypePatch");
            }
            const localVarPath = '/api/v1/event-type/{event_type_name}'
                .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(eventTypePatch, "EventTypePatch", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeName === null || eventTypeName === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeUpdate", "eventTypeName");
            }
            if (eventTypeUpdate === null || eventTypeUpdate === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeUpdate", "eventTypeUpdate");
            }
            const localVarPath = '/api/v1/event-type/{event_type_name}'
                .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(eventTypeUpdate, "EventTypeUpdate", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
    v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (eventTypeName === null || eventTypeName === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeUpdateRetrySchedule", "eventTypeName");
            }
            if (retryScheduleInOut === null || retryScheduleInOut === undefined) {
                throw new RequiredError("EventTypeApi", "v1EventTypeUpdateRetrySchedule", "retryScheduleInOut");
            }
            const localVarPath = '/api/v1/event-type/{event_type_name}/retry-schedule'
                .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer.stringify(ObjectSerializer.serialize(retryScheduleInOut, "RetryScheduleInOut", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication) {
                yield (authMethod === null || authMethod === void 0 ? void 0 : authMethod.applySecurityAuthentication(requestContext));
            }
            const defaultAuth = ((_a = _options === null || _options === void 0 ? void 0 : _options.authMethods) === null || _a === void 0 ? void 0 : _a.default) || ((_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authMethods) === null || _c === void 0 ? void 0 : _c.default);
            if (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication) {
                yield (defaultAuth === null || defaultAuth === void 0 ? void 0 : defaultAuth.applySecurityAuthentication(requestContext));
            }
            return requestContext;
        });
    }
}
export class EventTypeApiResponseProcessor {
    v1EventTypeCreateWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeDeleteWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("204", response.httpStatusCode)) {
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeExportOpenapiWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("202", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "ExportEventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "ExportEventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeGenerateExampleWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeExampleOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeExampleOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeGetWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeGetRetryScheduleWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "RetryScheduleInOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "RetryScheduleInOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeImportOpenapiWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeImportOpenApiOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeImportOpenApiOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeListWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseEventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseEventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypePatchWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeUpdateWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "EventTypeOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    v1EventTypeUpdateRetryScheduleWithHttpInfo(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "RetryScheduleInOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            if (isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Bad request", body, response.headers);
            }
            if (isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Unauthorized", body, response.headers);
            }
            if (isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Forbidden", body, response.headers);
            }
            if (isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Not Found", body, response.headers);
            }
            if (isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Conflict", body, response.headers);
            }
            if (isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new ApiException(response.httpStatusCode, "Validation Error", body, response.headers);
            }
            if (isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new ApiException(response.httpStatusCode, "Too Many Requests", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer.deserialize(ObjectSerializer.parse(yield response.body.text(), contentType), "RetryScheduleInOut", "");
                return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
            }
            throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
}
//# sourceMappingURL=EventTypeApi.js.map